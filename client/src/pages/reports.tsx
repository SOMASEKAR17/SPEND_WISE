import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { ArrowLeft, Download, Share } from "lucide-react";
import { Link } from "wouter";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { downloadCSV, shareWhatsApp, formatCurrency, formatDateTime } from "@/lib/export-utils";
import { apiRequest } from "@/lib/queryClient";
import type { BankAccount, ExpenseCategory, TransactionWithDetails } from "@shared/schema";

export default function Reports() {
  const [filters, setFilters] = useState({
    fromDate: "",
    toDate: "",
    bankAccountId: "all",
    category: "all",
  });

  const { data: bankAccounts } = useQuery<BankAccount[]>({
    queryKey: ["/api/bank-accounts"],
  });

  const { data: expenseCategories } = useQuery<ExpenseCategory[]>({
    queryKey: ["/api/expense-categories"],
  });

  const { data: allTransactions } = useQuery<TransactionWithDetails[]>({
    queryKey: ["/api/transactions"],
  });

  // Filter transactions based on current filter state
  const filteredTransactions = allTransactions?.filter((transaction) => {
    const transactionDate = new Date(transaction.transactionDate);
    const fromDate = filters.fromDate ? new Date(filters.fromDate) : null;
    const toDate = filters.toDate ? new Date(filters.toDate) : null;

    if (fromDate && transactionDate < fromDate) return false;
    if (toDate && transactionDate > toDate) return false;
    if (filters.bankAccountId && filters.bankAccountId !== "all" && transaction.bankAccountId !== filters.bankAccountId) return false;
    if (filters.category && filters.category !== "all" && transaction.expenseCategory.category !== filters.category) return false;

    return true;
  }) || [];

  const totalTransactions = filteredTransactions.length;
  const totalAmount = filteredTransactions.reduce(
    (sum, t) => sum + parseFloat(t.amount.toString()), 
    0
  );

  const handleExportCSV = async () => {
    try {
      let url = "/api/export/csv";
      const params = new URLSearchParams();
      
      if (filters.fromDate) params.append("startDate", filters.fromDate);
      if (filters.toDate) params.append("endDate", filters.toDate);
      
      if (params.toString()) {
        url += `?${params.toString()}`;
      }

      const response = await fetch(url);
      if (response.ok) {
        const csvData = await response.text();
        downloadCSV(csvData, `expenses_${new Date().toISOString().split('T')[0]}.csv`);
      }
    } catch (error) {
      console.error("Failed to export CSV:", error);
    }
  };

  const handleShareWhatsApp = () => {
    const summary = `*Expense Report Summary*\n\n` +
      `ðŸ“Š Total Transactions: ${totalTransactions}\n` +
      `ðŸ’° Total Amount: ${formatCurrency(totalAmount)}\n\n` +
      `ðŸ“… Period: ${filters.fromDate || 'Beginning'} to ${filters.toDate || 'Now'}\n\n` +
      `Generated by Expense Tracker`;

    shareWhatsApp(summary);
  };

  const uniqueCategories = Array.from(new Set(expenseCategories?.map(cat => cat.category) || []));

  return (
    <div className="pb-20">
      {/* Header */}
      <div className="bg-purple-600 text-white p-4 shadow-lg">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <Link href="/">
              <Button variant="ghost" size="icon" className="mr-4 text-white hover:bg-purple-700">
                <ArrowLeft className="h-5 w-5" />
              </Button>
            </Link>
            <h1 className="text-xl font-semibold">Reports</h1>
          </div>
          <div className="flex space-x-2">
            <Button 
              variant="ghost" 
              size="icon" 
              className="text-white hover:bg-purple-700"
              onClick={handleExportCSV}
            >
              <Download className="h-5 w-5" />
            </Button>
            <Button 
              variant="ghost" 
              size="icon" 
              className="text-white hover:bg-purple-700"
              onClick={handleShareWhatsApp}
            >
              <Share className="h-5 w-5" />
            </Button>
          </div>
        </div>
      </div>

      <div className="p-4 pb-24">
        {/* Filter Section */}
        <Card className="mb-6">
          <CardContent className="p-4">
            <h2 className="text-lg font-semibold text-text-primary-custom mb-4">Filters</h2>
            
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <Label htmlFor="fromDate" className="text-sm font-medium text-text-primary-custom">From Date</Label>
                <Input
                  id="fromDate"
                  type="date"
                  value={filters.fromDate}
                  onChange={(e) => setFilters(prev => ({ ...prev, fromDate: e.target.value }))}
                  className="mt-1"
                />
              </div>
              <div>
                <Label htmlFor="toDate" className="text-sm font-medium text-text-primary-custom">To Date</Label>
                <Input
                  id="toDate"
                  type="date"
                  value={filters.toDate}
                  onChange={(e) => setFilters(prev => ({ ...prev, toDate: e.target.value }))}
                  className="mt-1"
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <Label className="text-sm font-medium text-text-primary-custom">Bank Account</Label>
                <Select 
                  value={filters.bankAccountId} 
                  onValueChange={(value) => setFilters(prev => ({ ...prev, bankAccountId: value }))}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="All Accounts" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Accounts</SelectItem>
                    {bankAccounts?.map((account) => (
                      <SelectItem key={account.id} value={account.id}>
                        {account.accountName}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label className="text-sm font-medium text-text-primary-custom">Category</Label>
                <Select 
                  value={filters.category} 
                  onValueChange={(value) => setFilters(prev => ({ ...prev, category: value }))}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="All Categories" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Categories</SelectItem>
                    {uniqueCategories.map((category) => (
                      <SelectItem key={category} value={category}>
                        {category}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <Button 
              className="w-full bg-purple-600 hover:bg-purple-700"
              onClick={() => {/* Filters are applied automatically */}}
            >
              Apply Filters
            </Button>
          </CardContent>
        </Card>

        {/* Summary Cards */}
        <div className="grid grid-cols-2 gap-4 mb-6">
          <Card>
            <CardContent className="p-4 text-center">
              <p className="text-sm text-text-secondary-custom">Total Transactions</p>
              <p className="text-2xl font-bold text-text-primary-custom">{totalTransactions}</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <p className="text-sm text-text-secondary-custom">Total Amount</p>
              <p className="text-2xl font-bold text-red-600">{formatCurrency(totalAmount)}</p>
            </CardContent>
          </Card>
        </div>

        {/* Detailed Report Table */}
        <Card>
          <CardContent className="p-0">
            <div className="p-4 border-b border-border">
              <h2 className="text-lg font-semibold text-text-primary-custom">Transaction Details</h2>
            </div>
            
            <div className="max-h-96 overflow-y-auto">
              {filteredTransactions.length === 0 ? (
                <div className="p-8 text-center text-text-secondary-custom">
                  No transactions match the selected filters.
                </div>
              ) : (
                filteredTransactions.map((transaction) => (
                  <div key={transaction.id} className="p-4 border-b border-border last:border-b-0">
                    <div className="flex justify-between items-start mb-2">
                      <div>
                        <h3 className="font-medium text-text-primary-custom">{transaction.expenseCategory.name}</h3>
                        <p className="text-sm text-text-secondary-custom">
                          {transaction.expenseCategory.group} â€¢ {transaction.expenseCategory.category}
                        </p>
                      </div>
                      <span className="text-lg font-semibold text-red-600">
                        {formatCurrency(parseFloat(transaction.amount.toString()))}
                      </span>
                    </div>
                    <div className="text-sm text-text-secondary-custom">
                      <p>{transaction.bankAccount.accountName} â€¢ {transaction.description || 'No description'}</p>
                      <p>{formatDateTime(transaction.transactionDate)}</p>
                    </div>
                  </div>
                ))
              )}
            </div>
          </CardContent>
        </Card>

        {/* Export Options */}
        <Card className="mt-6">
          <CardContent className="p-4">
            <h2 className="text-lg font-semibold text-text-primary-custom mb-4">Export Options</h2>
            <div className="grid grid-cols-2 gap-4">
              <Button 
                className="bg-green-600 hover:bg-green-700 flex items-center justify-center"
                onClick={handleExportCSV}
              >
                <Download className="mr-2 h-4 w-4" />
                Export CSV
              </Button>
              <Button 
                className="bg-green-500 hover:bg-green-600 flex items-center justify-center"
                onClick={handleShareWhatsApp}
              >
                <Share className="mr-2 h-4 w-4" />
                Share WhatsApp
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
